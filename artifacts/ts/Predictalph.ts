/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as PredictalphContractJson } from "../Predictalph.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace PredictalphTypes {
  export type Fields = {
    punterTemplateId: HexString;
    roundTemplateId: HexString;
    dynamicArrayForIntId: HexString;
    epoch: bigint;
    operator: Address;
    feesBasisPts: bigint;
    repeatEvery: bigint;
  };

  export type State = ContractState<Fields>;

  export type BetBullEvent = ContractEvent<{
    from: Address;
    epoch: bigint;
    amount: bigint;
    up: boolean;
  }>;
  export type BetBearEvent = ContractEvent<{
    from: Address;
    epoch: bigint;
    amount: bigint;
    up: boolean;
  }>;
  export type RoundEndedEvent = ContractEvent<{ epoch: bigint; price: bigint }>;
  export type RoundStartedEvent = ContractEvent<{
    epoch: bigint;
    price: bigint;
  }>;
  export type ClaimedEvent = ContractEvent<{
    from: Address;
    amount: bigint;
    epoch: bigint;
  }>;
}

class Factory extends ContractFactory<
  PredictalphInstance,
  PredictalphTypes.Fields
> {
  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as PredictalphTypes.Fields;
  }

  eventIndex = {
    BetBull: 0,
    BetBear: 1,
    RoundEnded: 2,
    RoundStarted: 3,
    Claimed: 4,
  };
  consts = {
    ErrorCodes: {
      PunterNotExists: BigInt(1),
      InvalidPunterAddress: BigInt(2),
      InvalidCaller: BigInt(3),
      BidTimestampReached: BigInt(4),
      RoundAlreadyRunning: BigInt(5),
      RoundDidntEnd: BigInt(6),
      RoundNotExists: BigInt(7),
      AlreadyPlayed: BigInt(8),
      NotEnoughAlph: BigInt(9),
    },
  };

  at(address: string): PredictalphInstance {
    return new PredictalphInstance(address);
  }

  tests = {
    getRound: async (
      params: Omit<
        TestContractParams<PredictalphTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getRound", params);
    },
    getRoundByEpoch: async (
      params: TestContractParams<
        PredictalphTypes.Fields,
        { epochToGet: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getRoundByEpoch", params);
    },
    getBetInfoByEpoch: async (
      params: TestContractParams<
        PredictalphTypes.Fields,
        { from: Address; epochToGet: HexString }
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getBetInfoByEpoch", params);
    },
    startRound: async (
      params: TestContractParams<PredictalphTypes.Fields, { price: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "startRound", params);
    },
    endRound: async (
      params: TestContractParams<
        PredictalphTypes.Fields,
        { actualPrice: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "endRound", params);
    },
    bid: async (
      params: TestContractParams<
        PredictalphTypes.Fields,
        { amount: bigint; up: boolean }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "bid", params);
    },
    withdraw: async (
      params: TestContractParams<
        PredictalphTypes.Fields,
        { arrayEpochIn: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
    setNewRepeatEvery: async (
      params: TestContractParams<
        PredictalphTypes.Fields,
        { newRecurrence: bigint }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setNewRepeatEvery", params);
    },
    destroyRound: async (
      params: TestContractParams<
        PredictalphTypes.Fields,
        { epochArray: HexString }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroyRound", params);
    },
    setNewFees: async (
      params: TestContractParams<PredictalphTypes.Fields, { basisPts: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setNewFees", params);
    },
    setNewOperator: async (
      params: TestContractParams<
        PredictalphTypes.Fields,
        { newOperator: Address }
      >
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "setNewOperator", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Predictalph = new Factory(
  Contract.fromJson(
    PredictalphContractJson,
    "=4-2=6+61=1+07=2+12=1-2=1-2+1=1+8=1-3+202=2-2+a6=2+b6=2-3=1+3=1-3+313=1+3=1-2+3=11-1+e=24+7e0212526f756e6420636f6e747261637420696420001600=25-1+d=22+7e0212526f756e6420636f6e747261637420696420001601=81-1+c=52+16027e0212526f756e6420636f6e74726163742069642000a00016007e031041637475616c2065706f6368206973201220776974682073746172742070726963652000=1158",
    "2a48ca28abf4ddc54f2c7fa85ae957b2a547c4a0ef934cb092e55da8294965f4"
  )
);

// Use this class to interact with the blockchain
export class PredictalphInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PredictalphTypes.State> {
    return fetchContractState(Predictalph, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeBetBullEvent(
    options: EventSubscribeOptions<PredictalphTypes.BetBullEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Predictalph.contract,
      this,
      options,
      "BetBull",
      fromCount
    );
  }

  subscribeBetBearEvent(
    options: EventSubscribeOptions<PredictalphTypes.BetBearEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Predictalph.contract,
      this,
      options,
      "BetBear",
      fromCount
    );
  }

  subscribeRoundEndedEvent(
    options: EventSubscribeOptions<PredictalphTypes.RoundEndedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Predictalph.contract,
      this,
      options,
      "RoundEnded",
      fromCount
    );
  }

  subscribeRoundStartedEvent(
    options: EventSubscribeOptions<PredictalphTypes.RoundStartedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Predictalph.contract,
      this,
      options,
      "RoundStarted",
      fromCount
    );
  }

  subscribeClaimedEvent(
    options: EventSubscribeOptions<PredictalphTypes.ClaimedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Predictalph.contract,
      this,
      options,
      "Claimed",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | PredictalphTypes.BetBullEvent
      | PredictalphTypes.BetBearEvent
      | PredictalphTypes.RoundEndedEvent
      | PredictalphTypes.RoundStartedEvent
      | PredictalphTypes.ClaimedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      Predictalph.contract,
      this,
      options,
      fromCount
    );
  }
}
